#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ValeurOperande
 major_version : 25
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1df0089f060e1cc5
 internal_properties : BQAAAAUAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BQAAAAUAAAC3lZXyW5DZ05BMBRNVRyGgnnX54AWpaUyBfDMZOb4W/H/qYIuLwr8ajO0bxXwiWM+JTFHsc8Fd9eD7mnlgunqivCBHiIccOWVQ++Dl6NShKAWvB5rTXNVZ1aqmQ/wDFFhhQwxH/bAJ6ZM=
  type_code : 10
  p_codes :
   -
     internal_properties : BQAAAAUAAABWd3PsTKiZgifw0fhe+vnWtRxNgXFK2MZLhvNUmSfwHmAqLqYNcBvh1he4nxDfaaul0mLOHALNgPxd3Iig8hQYU/77GTZ4uloFcpJf81gZP1bEpq2ChDNk0y4+/xhsAFn9QGLBjdOfbM2ORCjT/NfGxQdiAtcN0NMZNJa1iubuIs8nHKF5V3nAIuke4Ha2epWVKtN7Seifje1yzDWMgv44dvLbrA==
     code : |1+
      // modes d'adressage x86 et leur encodage
      ValeurOperande est une Classe
      	modeAdres	est ModeAdressage // mode d'adressage, MA_Registre, MA_Immemdiat, MA_Indirection
      	taillePtr   est entier     // taille pointée si indirection + taille précisée. ex : dword ptr[ebx]
      	registre    est chaîne	   // ex : "EAX"
      	registre2   est chaîne	   // 2eme regsitre si indirection. ex : "EDX" si mode = "[EBP+EDX]"
      	déplacement est entier sur 8 octets// déplacement si indirection
      	valeurImmediate est un entier sur 8 octets sans signe 
      	label		est chaine  // si mode = MA_Label
      FIN
      
      // modes d'adressage possible
      ModeAdressage est une énumération
      	MA_Vide	   		= -1 // vide pour réserver de place avant patch des labels
      	
      	MA_Registre            = 0 // registre direct. ex : EAX
      	MA_Immemdiat           = 1 // valeur immédiate. ex : 1234
      	MA_Indirection         = 2 // indirection. ex : [EBX+EDX+6]
      	MA_Label	           = 3 // label. ex:  jmp boucle
      	MA_IndirectionLabel	   = 4 // indirection sur label. ex:  lea eax,[nombreMagique]
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2157233700604943557
     type_code : 27
     code : |1-
      PROCEDURE Constructeur()
      :modeAdres = MA_Vide
     type : 589824
   -
     name : Destructeur
     procedure_id : 2157233700605009093
     type_code : 28
     code : |1-
      PROCEDURE Destructeur()
     type : 655360
   -
     name : sGetType
     procedure_id : 2157233700605074629
     type_code : 12
     code : |1-
      // renvoie le type de la zone pointée. ex :  REGISTRE_32BITS
      Procédure sGetType() : chaîne 
      
      renvoyer sgetTypeRegistre( registre )
      	
     type : 458752
   -
     name : Encode_MOD_REG_RM_IndirectionEtDéplacement
     procedure_id : 2157233700605140165
     type_code : 12
     code : |1+
      PROCÉDURE Encode_MOD_REG_RM_IndirectionEtDéplacement( regDestination est ValeurOpérande )
      dbgAssertion( regDestination.bEstModeRegistre())
      nRegDest    est un entier = nIndiceRegistre(regDestination.registre) & 0x07
      // rebond
      renvoyer EncodeAdressage(nRegDest)
      
     type : 458752
   -
     name : EncodeAdressage
     internal_properties : BQAAAAUAAAA3ucjqAm5qmfGFWZI1a+GJZvGwuONyU7ZTHOQHuaF640//+A3EqTaVgCb4UqsIOgpldf66rCTF10Z3R7L381+m0/NTeqWJRWJENthilwwR7tjIipJy/IM0/Sw6QjOvct/KiknDd8o1e3ezL20wAphhWuiknR0hwqiDSEZ+Qq6NXo/9aVuuEPWxm8g5bcA947+3CFij3J/0CU82DNzz2w11/2HLR2kxPnIfZlRyVmKGAH8unr2VRGCuovU5FA/LyckRnTrdT68Tp1M/cSn78V8/TioTYB1a0IrhWJYYUroIKw==
     procedure_id : 2157233700605205701
     type_code : 12
     code : |1-
      // encodage de l’adressage MOD REG RM : 
      //  nReg, [reg1+reg2+offset] avec <reg2> et <offset> optionnels. 
      // <nReg> est le registre correspondant à l'autre paramètre
      PROCÉDURE EncodeAdressage( nReg est entier )
      
      RegSource est chaine 			  = :registre 
      // indice  registre source
      nRegSource est un entier  = nIndiceRegistre(RegSource)//&0x7
      
      // si on est un adressage de type registre
      si bEstModeRegistre() ALORS
      	renvoyer Encode_MOD_REG_RM_RegistreDest( nReg ) 		
      FIN
      
      // regarde si on a besoin de rajouter un octet supplémentaire
      sib est buffer // (Scaled Index Byte)
      //SI RegSource ="esp" _OU_ RegSource="rsp"  ou nRegSource>7 ALORS
      SI 	   RegSource="esp" ...
       _OU_  RegSource="rsp" ...  
       _OU_  RegSource="r12"  ALORS   // cas 'mov rax,qword ptr [r12+8]' // 49 8B 44 24 08    ou 49 89 04 24          mov         qword ptr [r12],rax
      	// SIB a 3 champs :
      	//  7  6  |  5 4 3  | 2 1 0
      	//  Scale |  Index  |  Base
      	soit NumReg_ESP 	= 4
      	SS est un entier    = 0 // x1
      	index est un entier = NumReg_ESP
      	base est un entier	= NumReg_ESP
      	sib = Caract( SS * 0x40 | index * 0x8 | base )	
      FIN
      si :registre2<>"" alors
      	// SIB a 3 champs :
      	//  7  6  |  5 4 3  | 2 1 0
      	//  Scale |  Index  |  Base
      	numRegIndex 	est entier = nIndiceRegistre(:registre2)&0x7
      	SS est un entier    = 0 // x1
      	index est un entier = numRegIndex
      	base  est un entier	= nIndiceRegistre(:registre)&0x7
      	sib = Caract( SS * 0x40 | index * 0x8 | base )	
      
      	// si petit déplacement, ie 1 octet
      	SI :déplacement = 0_et_ RegSource="esp"  ALORS
      		RENVOYER _Encode_MOD_REG_RM( MODREGRM_MOD_Indirection, nReg, 4  ) 		   + sib 
      	fin
      	nRegSource  =  4 // esp
      FIN
      
      // si pas de déplacement, ni de sib
      //+5 est réservé pour "+imm32"
      SI :déplacement = 0_ET_ sib="" _et_ nRegSource<>5  ALORS
      	RENVOYER _Encode_MOD_REG_RM( MODREGRM_MOD_Indirection, nReg, nRegSource&07  ) 
      FIN
      
      // si petit déplacement, ie 1 octet
      si :déplacement <= 0x7F _et_ :déplacement >= -080 ALORS
      	RENVOYER _Encode_MOD_REG_RM( MODREGRM_MOD_Indirectio_Plus8Bit, nReg, nRegSource&07  )  + sib + Caract(:déplacement & 0xFF)
      SINON
      	RENVOYER _Encode_MOD_REG_RM( MODREGRM_MOD_Indirectio_Plus32Bit, nReg,nRegSource&07  ) + sib + AssembleurX86::uint32VersbufferLowEndian(:déplacement)
      FIN	
     type : 458752
   -
     name : Encode_MOD_REG_RM_IndirectionRegistre
     internal_properties : BQAAAAUAAAD0KCwXLA6BT5fLxnLW5X2XjYnPJYS5kahJkdW51JvdvP22ndCi/ptfsgMUXPLktX3vVMOjrXa8SddT25L5ussk50Ji0y6mskY1GOVX49WvYtvXtaR2y+2ae9l3pqp7XFo1Fm8oswQddkXvZfe3G5NVa28T+6OUxt3xneFuZAnyYe0nccYp1K34eA6RSaT2EupmNQUruA8oiH0WhArkL8v80Lu3
     procedure_id : 2157233700605271237
     type_code : 12
     code : |1+
      //encode  l’accès a une adresse pointée par un registre avec ou sans sans déplacement.
      // ex : inc [reg]
      PROCÉDURE Encode_MOD_REG_RM_IndirectionRegistre( nForceReg est entier ) : buffer
      dbgAssertion( bEstModeIndirection() )
      
      // cas inc [EBX + EDX]
      SI :registre2<>"" _ou_ :déplacement<>0 ALORS
      	
      	renvoyer EncodeAdressage(nForceReg)
      		
      FIN
      
      
      r_m est un entier =  nIndiceRegistre( :registre) & 0x7
      RENVOYER _Encode_MOD_REG_RM( MODREGRM_MOD_Indirection, nForceReg,  r_m  )
      
      	
     type : 458752
   -
     name : _Encode_MOD_REG_RM
     internal_properties : BQAAAAUAAADRU6ktHYFI5EkVk1EdkAEPs1FfmI7MnjgbYCE3OEEa9F+KDb7Agbgg2tSuR5mF+Q1+H761yZj79xAkSSGFK/0e6UximNI0zZycG1ggX1DhYdeqT9DyydNx3JxuRwu6ry9gFbR30tfyndCUhoo6GuIuUkoIsvpx2W5mAlwhzzDlZLLCVtGEF7UQPYMyL0u62p6z+BmzTKzYOIU9YUFnJloH+7QioK8jj9jwp+2iVcmJGVmuQg==
     procedure_id : 2157233700605336773
     type_code : 12
     code : |1-
      // encodage du champ de bits qui spécifie le mode d'adressage des paramètres x86
      // voir
      // https://www.intel.fr/content/www/fr/fr/architecture-and-technology/64-ia-32-architectures-software-developer-vol-2a-manual.html?wapkw=programming+manuals
      // 2.1.3 et 2.3.5 :
      //----------------------------------
      //2.1.3 ModR/M and SIB Bytes
      //Many instructions that refer to an operand in memory have an addressing-form specifier byte (called the ModR/M
      //byte) following the primary opcode. The ModR/M byte contains three fields of information:
      //• The mod field combines with the r/m field to form 32 possible values: eight registers and 24 addressing modes.
      //• The reg/opcode field specifies either a register number or three more bits of opcode information. The purpose
      //of the reg/opcode field is specified in the primary opcode.
      //• The r/m field can specify a register as an operand or it can be combined with the mod field to encode an
      //addressing mode. Sometimes, certain combinations of the mod field and the r/m field are used to express
      //opcode information for some instructions.
      //-----------------------------------
      // <mod> : constante dans MODREGRM_MOD_Indirection, .., MODREGRM_MOD_Registre, 
      // résultat:  1 octet
      PROCÉDURE PRIVÉE GLOBALE _Encode_MOD_REG_RM( mod entier, reg entier, rm entier)
      dbgAssertion(mod>=0 ET mod <=3)
      dbgAssertion(reg>=0 ET reg <=7)
      dbgAssertion(rm>=0  ET rm  <=7)
      
      // mod_reg_rm a 3 champs :
      //  7  6  |  5 4 3  | 2 1 0
      //  mod   |  reg    |  r/m
      mod_reg_rm est un entier sur 1 octets sans signe
      mod_reg_rm = 			  mod * 0x40 				// MOD bits 6 7
      mod_reg_rm = mod_reg_rm | reg * 0x08 				// REG bits 5 4 3
      mod_reg_rm = mod_reg_rm | rm 					 	// R/M bits 2 1 0
      
      
      RENVOYER  Caract(mod_reg_rm)	
     type : 458752
   -
     name : Encode_MOD_REG_RM_RegistreDest
     procedure_id : 2157233700605402309
     type_code : 12
     code : |1-
      procédure Encode_MOD_REG_RM_RegistreDest(  nValRegDans_modRegRM entier)
      
      regDest est chaîne = :registre
      RENVOYER  _Encode_MOD_REG_RM( MODREGRM_MOD_Registre, nValRegDans_modRegRM, nIndiceRegistre(regDest) & 0x7)  
     type : 458752
   -
     name : Encode_MOD_REG_RM_RegistreDestSource
     procedure_id : 2157233700605467845
     type_code : 12
     code : |1+
      Procédure Encode_MOD_REG_RM_RegistreDestSource( regSource est chaîne )
      
      // 0X7 pour le cas des registres 64 bits étendus. ex : R11
      regDest est chaîne = :registre
      renvoyer  _Encode_MOD_REG_RM( MODREGRM_MOD_Registre, nIndiceRegistre(regDest) & 0x7, nIndiceRegistre(regSource) & 0X7)   
     type : 458752
   -
     name : bEstRegistre8Bits
     procedure_id : 2157233700605533381
     type_code : 12
     code : |1+
      PROCEDURE bEstRegistre8Bits() : booléen
      
      si  :modeAdres <> MA_Registre ALORS
      	renvoyer faux
      FIN
      selon :registre
      	cas "al","bl","cl","dl"
      		renvoyer Vrai
      	CAS "ah","bh","ch","dh"
      		RENVOYER Vrai		
      	// +registres étendus 64 bits		
      	CAS "r8b", "r9b", "r10b","r11b",...
      	    "r12b","r13b","r14b","r15b"
      		RENVOYER Vrai					
      	AUTRE CAS
      		renvoyer faux
      FIN
     type : 458752
   -
     name : bEstRegistre32Bits
     procedure_id : 2157233700605598917
     type_code : 12
     code : |1+
      PROCÉDURE bEstRegistre32Bits()
      
      RENVOYER  bEstModeRegistreDeType( REGISTRE_32BITS)
      
     type : 458752
   -
     name : bEstModeRegistreDeType
     procedure_id : 2157233700605664453
     type_code : 12
     code : |1+
      // sType : ex : REGISTRE_32BITS
      procédure bEstModeRegistreDeType(sType est chaine) : booléen
      
      RENVOYER  :modeAdres = MA_Registre _ET_ bEstRegistreDeType(:registre, sType)
      
     type : 458752
   -
     name : bEstModeRegistreDeNom
     procedure_id : 2157233700605729989
     type_code : 12
     code : |1-
      // indique si on est un adressage direct sur un registre spécifique. ex "EAX"
      procédure bEstModeRegistreDeNom( sNomReg chaine )
      
      RENVOYER  :modeAdres = MA_Registre _et_ :registre = sNomReg
     type : 458752
   -
     name : bEstModeValeurImmediate
     procedure_id : 2157233700605795525
     type_code : 12
     code : |1+
      procédure bEstModeValeurImmediate()
      
      renvoyer :modeAdres = MA_Immemdiat
     type : 458752
   -
     name : bEstModeIndirection
     procedure_id : 2157233700605861061
     type_code : 12
     code : |1-
      procédure bEstModeIndirection()
      
      renvoyer :modeAdres = MA_Indirection
     type : 458752
   -
     name : bEstModeLabel
     procedure_id : 2157233700605926597
     type_code : 12
     code : |1+
      procédure bEstModeLabel()
      
      renvoyer :modeAdres = MA_Label 
     type : 458752
   -
     name : bEstModeIndirectionLabel
     procedure_id : 2179793565987011452
     type_code : 12
     code : |1-
      procédure bEstModeIndirectionLabel()
      
      RENVOYER :modeAdres = MA_IndirectionLabel
     type : 458752
   -
     name : bEstModeRegistre
     procedure_id : 2157233700605992133
     type_code : 12
     code : |1+
      procédure bEstModeRegistre()
      
      renvoyer :modeAdres = MA_Registre
     type : 458752
   -
     name : nGetTailleEnBit
     internal_properties : BQAAAAUAAAAqfDrgqj5/IBLHAKhw4FpfIFD1SAN9DcQ1tKrfvzG82CQJ/SJShV9vGwkXqF3SYEJJJAydU9hFW+6EP0K9EEjSv8HFyRTRMN3Jcv6+LDuHHc8BuGjDohLyaep7fPfez8UitOyiSku6ogMq25+mQPg0jKc0h0AxzacJstssR6TVTaWEu3PjVsd1YxRMyKan1BQvc6K7iw==
     procedure_id : 2157233700606057669
     type_code : 12
     code : |1+
      procédure nGetTailleEnBit() : entier
      
      SI bEstModeRegistreDeType(REGISTRE_8BITS) ALORS
      	RENVOYER 8
      FIN
      SI bEstModeRegistreDeType(REGISTRE_16BITS) ALORS
      	RENVOYER 16
      FIN
      si bEstModeRegistreDeType(REGISTRE_32BITS) ALORS
      	renvoyer 32
      FIN
      SI bEstModeRegistreDeType(REGISTRE_64BITS) ALORS
      	RENVOYER 64
      FIN
      // + indirection ou la taille a été forcée. ex "mov  rax, dword ptr[rsp + 8]"
      si bEstModeIndirection() _et_ :taillePtr<>0 ALORS
      	renvoyer :taillePtr
      FIN
      
      // autre
      renvoyer 0
     type : 458752
   -
     name : bEstRegistre64Bits
     procedure_id : 2157233700606123205
     type_code : 12
     code : |1+
      PROCÉDURE bEstRegistre64Bits()
      
      RENVOYER  bEstModeRegistreDeType( REGISTRE_64BITS)
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1b6c8b6f01c129a5
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
  strings :
   -
     text :
      fr-FR : "Erreur de syntaxe : registre attendue au lieu de <%1>"
     index : 0
   -
     text :
      fr-FR : "Erreur de syntaxe : valeur immédiate attendu au lieu de <%1>"
     index : 1
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
