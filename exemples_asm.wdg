#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : exemples_asm
 major_version : 25
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1b72c8bf01297640
 internal_properties : BQAAAAUAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  internal_properties : BQAAAAUAAAC8Sl0pfseidXE9/kBmawagKU2LQSv8bn6/vNDKIJF1LaO5OrXnJBCSprdxyfnkeSCSHo4FglHTPzGvuw==
  type_code : 31
  p_codes :
   -
     code : |1-
      
     type : 720898
  procedures :
   -
     name : pCompileMult64x64_128
     internal_properties : BQAAAAUAAAAyvBwMyzv0n34pOAAvftZwXWmxTQBRMJc1fdPow5NQqMZ+aCHI9bdAnZ6tUutOx2Rx0NHXUv8aL7wcvsc/hiZfJjpLZTV2bHA+oZGyVTVEoNXKp37fEdfl0SOuMBmMDeUE5rFbr6DniUq6coj4InpRPSRumPuoo/i+I7ceKe3tw+R6b6L5jL0J9T4AHSl6hqapq4kgNwAGgAvzyxN6wBddsfROk8iRGiVHQUpeev8dNM24GNHQLIO0V7bN1r95+9+JuGGdIz2CmV/1ISzGatwe7gFtXi7QGkLAqp26+oHTh3Dv70uKMLpSAca7meAJnTmj0s+t84vwopJP8ymG9GgdbhL78GRu/TTiD6doQgMRwH9DX1nWRPxw53HZ+bE8kaPtDTZ4t488+bqRhhEoZ5AAvSw2Hgs4b8wfzW6YyiqMg2xKYXLlhwZUvgqOyIdTmEdwIQq7mtPme2mZ6HG5vehoqHV49ZhHCA6CF1UZxadD7DIcl4Y4XJiYcraY6s5j2OBac8Deo87C7akd0Cc4DGo0X1LPXqdsCJaLpeTRz1PRG3e+NY2EAsnCakKgPkoQ97c3+tL5VD+sKnTnGqA2hZM6L4ZZBp9gzMCTaLPPxH5GD8Dk4IvP1mbQ+g==
     procedure_id : 1977864076556635675
     type_code : 15
     code : |1+
      // renvoie une procédure qui multiplie 2 entier 64 bits et revoie un entier sur 128 bit. 
      // proto :
      //  Mult64x64_128( n1_L32, n1_H32, n2_L32, n2_H32, OUT *pnResult128 )
      procédure pCompileMult64x64_128()
      
      // code ASM
      sCodeAssembleur est chaine = [
      	; proto  Mult64x64_128( n1_L32, n1_H32, n2_L32, n2_H32, OUT *pnResult128 )()
      	
      	; A*B = poidsfaible(B0*A0) 											// bits  0 a 31
      	;      +2 ^ N* (B0*A0 + A1*B1 + (A1 - A0)*(B0 - B1)) + poidsfort(B0*A0)		// bits 32 a 64 
      	;      +2 ^ 2N*  A1*B1														// bits 64 a 128
      	
      	; prologue
      	push        ebp
      	mov         ebp, esp
      	push 		ebx
      	push		esi
      	push		edx
      	push		ecx
      	
      	; edi = adresse du résultat
      	mov		edi, [ebp + 24]; *pnResultat
      	
      	; R0 = A0 * B0
      	mov	eax, [ebp + 8]; A0
      	mul eax, [ebp + 16]; *B0 dans EDX : EAX
      	;  affectation du résultat R0
      	mov [edi],      eax; R0l
      	mov [edi + 4],  edx; R0h
      	mov ecx, 0
      	mov [edi + 8],  ecx; 0
      	mov [edi + 12], ecx; 0
      	
      	; R1 = (A0 * B1) + (A1 * B0)
      	; (A0 * B1)
      	mov	eax, [ebp + 8] ; A0
      	mul eax, [ebp + 20]; A0*B1 dans EDX : EAX
      	;  pré - affectation du résultat R1
      	adc [edi + 4], eax
      	adc [edi + 8], edx
      	adc [edi + 12], 0
      	;  (A1 * B0)
      	mov	eax, [ebp + 12]; A1
      	mul eax, [ebp + 16]; A1*B0 dans EDX : EAX
      	; +A1*B0
      	adc [edi + 4], eax
      	adc [edi + 8], edx
      	adc [edi + 12], 0
      	
      	; R2 = A1*B1
      	mov	 eax,[ebp + 12]; A1
      	mul eax, [ebp + 20]; A1*B1 dans EDX : EAX
      	;  +R2
      	adc [edi + 8],  eax
      	adc [edi + 12], edx
      	
      	
      	; --------------------------
      	; épilogue
      	pop			ecx
      	pop			edx
      	pop			esi
      	pop			ebx
      	pop         ebp
      	ret			20; // 5 paramètres de 4 octets
      ]
      
      
      renvoyer  compileAsmX86(sCodeAssembleur) 
     type : 458752
   -
     name : pCompileAdd256
     internal_properties : BQAAAAUAAACK7eUOCFOuaDIsB9xzftjj1QshtDlse+Pfh+26pM6/OsIHpDUvQft+KKQZFtZ5Np9cTIs7oN7KelyH9Vtqe1HfgHXQ75f0fhKS8k+Cez0VOb+/4HRLp+XL7zcozW8AQTcg6RILFa4E58OBYXrdJTOMAKrkkFzKpJc46On76FeyyG8PI6T7nDbCR1xVvdGKKEQqvRleh0r9n6+WmGYz1383WPQJIEdBqWXHHi3f9yM5/qwS8ViETXCk7mfr/eyAKKj3u/XB++xBv2OyvBt7LFtj2aN/B3dNTSX97/MDOjnKuoqdAbLn0STBKNKILi6+DAlC4MQ6e5Zd5RstfOtOLHwG261RhGLky+b2dqSRR+hstIu+kh9DFAhO6r5Obp2DGm5easyj5AGulh7JBPPejlEGpFGSRN+S2ZFesRa/wQgCve0cgRkt
     procedure_id : 1979714490225729916
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // [ <Résultat> = ] pCompileAdd256 ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	procédure : <indiquez ici les valeurs possibles ainsi que leur interprétation>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      Procédure pCompileAdd256() : procédure
      
       sCodeASMx8632_Addition256 est chaine = [
      
      	// proto add256( INTOU int256 *A, int256 *B)  OUT BOOL retenue
      	// prologue
      	Push edx
      	Push ecx
      	
      	
      	// récup adresses
      	mov edx,[ESP+12] // P1 = A dans EBX
      	mov ecx,[ESP+16] // P2 = B dans ECX
      	
      	//  bit 0 a 31
      	mov eax,[ecx]
      	Add [edx],eax ; // A += B
      	// bits 32 a 63
      	mov eax,[ecx+4]
      	adc [edx+4],eax ; // A += B + retenue
      	// bits 64 a 95
      	mov eax,[ecx+8]
      	adc [edx+8],eax ; // A += B + retenue	
      	// bits 96 a 127
      	mov eax,[ecx+12]
      	adc [edx+12],eax ; // A += B + retenue	
      	// retenue
      	mov eax,0
      	adc eax,0
      	
      	; épilogue
      	Pop ecx
      	Pop edx
      	ret 8	; // 2 paramètres de 4 octets
      ]
      renvoyer compileAsmX86( sCodeASMx8632_Addition256 )
     type : 458752
   -
     name : pCompileMult128x128_256
     internal_properties : BQAAAAUAAABciNOj5xqzsl3bke0FuCV+GN7x9HveHT+xbSzsFL/0ilL2G4XUSLU+tupO7oQe9BqYYJ6z0JFv82G0eeB4wa6+q4WNTon3HVwySUXfL74RInRtEEohv1tOAn4c0WG0TikSm6TkJn+rhxnojsMy5yfrMD600m562HfyTHlYZsSDLpggxUZnSTJ4xGB+ehtrASbywXgON+pZ7OVLJogkuu5QSgUL+ljeKluHixNvNcnD3481uzF1r+YfU5HNCxocczB4kN36pairGP60lO2s1Pv/0UnDXkw2StMmQ05z6TJmCW3olEs4PLNE1NwihGa8o+6JGWVsX/ymLyvXzShVfX8djKIP9gp3V35iOOgOEdH7F02xThRYHUO/jh7Ab08q8WoVsZ5n4TvYxeq0cdtewhURAvKli0EMjMUgNRCNkoAKOJQfUB04094bCCaytBpCSMCGam1OS4wggNCYZlKrxl40tI7RfaJZ6rwDXOBwegNfhvooncghgMbQzwN8pLSKNHyQT6wadv/EC+XBSd2ljv72zqFrfoq7AbeGFE+lYzc/Q1bHuUx1lP7X6WxozfONMXBWC9RkdvVDmw01ajHGoVXnq7HrIhWHDsgUSfGywC8KSKZtWjTPzIXYPL+HafVxh45/YK6KrylkiHbmBaO74FcentenrSk26M2cZTIwO3hvVFpeHrMOXdkArWYT/8w8ZjTALC6TG52e2dhGEtbk46wztauJTSM7jm4ZoJ846UWy9YIzWDyOtJGMAOYopnw97Vh8+8VrmzA=
     procedure_id : 1987043821808487544
     type_code : 15
     code : |1+
      // renvoie une procédure qui multiplie 2 entiers 64 bits et revoie un entier sur 128 bit. 
      // proto :
      //  Mult64x64_128( n1_L32, n1_H32, n2_L32, n2_H32, OUT *pnResult128 )
      procédure pCompileMult128x128_256()
      
      // code ASM
      sCodeAssembleur est chaine = [
      	// proto  Mult128x128_256( int128 *nombreA, int128 *nombreB, OUT *result256 )()
      	
      	; A*B = poidsfaible(B0*A0) 													// bits  0  a  63
      	;      +2 ^ N* (B0*A0 + A1*B1 + (A1 - A0)*(B0 - B1)) + poidsfort(B0*A0)		// bits 63  a 127
      	;      +2 ^ 2N*  A1*B1														// bits 127 a 256
      	
      	// prologue
      	push        ebp
      	mov         ebp, esp
      	push 		ebx
      	push		esi
      	push		edx
      	push		ecx
      	// --------------------------
      	// EBP +  8 : *A
      	// EBP + 12 : *B
      	// EBP + 16 : *resultat
      	// EBP + 20 : A0B0
      	// EBP + 28 : A1B1
      	// EBP + 32 : A0B1
      	// EBP + 40 : A1B0
      	add			ESP,32  // EBP+0
      	
      	//A0*B0
      	mov	edi, [ebp + 8] // A = [ A1 A0 ]
      	push	 [edi + 12] // A0L
      	push	 [edi + 8 ] // A0J
      	mov	edi, [ebp + 12] // B = [ B1 B0 ]
      	Push	 [edi + 12] // A0L
      	Push	 [edi + 8 ] // A0J	
      	lea		 edi, [ebp + 20] // *A0B0
      	Push	 [ep]
      	call	 _mult6464_128 //  A0B0 = _mult6464_128( A0, A1 )
      	
      	// Affecter résultat
      	mov	edi, [ebp + 16] // EDI = resultat
      	mov	esi, [ebp + 20] // A0,B0
      	mov		 eax,[esi+16]
      	mov 	 [edi+16],eax
      
      	; épilogue
      	Pop			ecx
      	Pop			edx
      	Pop			esi
      	Pop			ebx
      	Pop         ebp
      	ret			20; // 5 paramètres de 4 octets
      	
      _mult6464_128:
      	// ; proto  Mult64x64_128( n1_L32, n1_H32, n2_L32, n2_H32, OUT *pnResult128 )()
      	; edi = adresse du résultat
      	mov		edi, [ebp + 24]; *pnResultat
      	
      	; R0 = A0 * B0
      	mov	eax, [ebp + 8]; A0
      	mul eax, [ebp + 16]; *B0 dans EDX : EAX
      	;  affectation du résultat R0
      	mov [edi],      eax; R0l
      	mov [edi + 4],  edx; R0h
      	mov ecx, 0
      	mov [edi + 8],  ecx; 0
      	mov [edi + 12], ecx; 0
      	
      	; R1 = (A0 * B1) + (A1 * B0)
      	; (A0 * B1)
      	mov	eax, [ebp + 8] ; A0
      	mul eax, [ebp + 20]; A0*B1 dans EDX : EAX
      	;  pré - affectation du résultat R1
      	adc [edi + 4], eax
      	adc [edi + 8], edx
      	adc [edi + 12], 0
      	;  (A1 * B0)
      	mov	eax, [ebp + 12]; A1
      	mul eax, [ebp + 16]; A1*B0 dans EDX : EAX
      	; +A1*B0
      	adc [edi + 4], eax
      	adc [edi + 8], edx
      	adc [edi + 12], 0
      	
      	; R2 = A1*B1
      	mov	 eax,[ebp + 12]; A1
      	mul eax, [ebp + 20]; A1*B1 dans EDX : EAX
      	;  +R2
      	adc [edi + 8],  eax
      	adc [edi + 12], edx
      	ret;
      	
      
      ]
      
      
      renvoyer  compileAsmX86(sCodeAssembleur) 
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : ProcéduresGlobales1
resources :
 string_res :
  identifier : 0x1b72c8ac01272c56
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
