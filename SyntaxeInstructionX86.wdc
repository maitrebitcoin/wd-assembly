#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : SyntaxeInstructionX86
 major_version : 25
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1b6d31370407bf91
 internal_properties : BQAAAAUAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BQAAAAUAAACNovAR/6wlbzaEqZKonmKDsGl7Rn8TkHgPwmc47oRyHw6EhVIibzyTXadfYBW+Q4H7MZWHaJK0noShW6PGX6LdwmapNHiz0d3HvkCuynozZjwggdQAKPdQL8c=
  type_code : 10
  p_codes :
   -
     internal_properties : BQAAAAUAAACq/LpgEObhENIHQCgw4BofIND1yEO9TYQ1tCqfP3E8WOTJPWLShV/vW8lXqJ3SoALJpIwdk5iFG+4EvwK9UMhS/4GFCRRRsN2Jsl6ezFsnvW8hmEgjQjKSiYpbXJd+b2VC1EyCqmvaQiNKO//GYBhUrMeUZ6BRbccpUjsMZ8T17cWkm1PDducVA7QsKMZXknqv8yI7Cw==
     code : |1+
      // instruction X86 pour un syntaxe spécifique
      SyntaxeInstructionX86 est une Classe
      	mnemonique est chaine // nom de l'instruction en minuscules. ex "add" ou "ret"
      	opcode	   est buffer // code binaire principal a générer pour cette instruction. 1 a 4 octets
      	encodage   est chaine // options d'encodage des paramètres. ex ENCODAGE_ADDREGTOOPCODE
      	tabTypeParam   est un tableau de TypeOpérande // type des paramètres des l'instruction
      	signature      est chaîne  // version condensée des type pour accélérer la recherche de la bonne syntaxe
      	syntaxeEnClair est chaine
      	vex_extPP 	   est chaine // extension PP   si l'encode est VEX : rien, 66, F3 ou F2
      	vex_extM 	   est chaine // extension MMMM si l'encode est VEX : 0F , 0F38 ou 0F3A
      	rex_prefixe	   est chaine // préfixe pour REX. "" ou "66"
      	modeValide est chaine // limitation du mode de compilation . "", ou "32"  ou "64"
      FIN
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1976289923846160273
     type_code : 27
     code : |1-
      PROCEDURE Constructeur()
     type : 589824
   -
     name : Destructeur
     procedure_id : 1976289923846225809
     type_code : 28
     code : |1+
      PROCEDURE Destructeur()
     type : 655360
   -
     name : bEstcompatibleAvecTabValeur
     internal_properties : BQAAAAUAAAACJNLoRv7MjmQ76GJm4JofPuCfdGVDFcKfEOpRXSH06AYdO4rsJ8NhPa3L+tOqeBp3FBqFATb1FcgIZ9gHzJyOvVG/baILbF+bnmVt9SjIumqSMdPAT8UhAHFuY4BreALBTXU5s8zJRS7lYg7fPYXlDyBd6s2OoIKcZWbbOBEmkhjpeHJ8v65McrMbO8OAKPA3e7qTow==
     procedure_id : 1976289923846291345
     type_code : 12
     code : |1+
      PROCÉDURE bEstcompatibleAvecTabValeur( tabValeurParam est un tableau de ValeurOpérande,  contexte est ContexteCompilation dynamique ) : booléen
      
      // si même nombre de paramètre
      si tabTypeParam.Occurrence() <> tabValeurParam.Occurrence() ALORS
      	renvoyer  faux
      FIN
      
      // cas particulier REX en 64 bits : de 0x40 a 0x48 
      // instructiont DEC 32 bits non utilisables en mode 64, il faut utiliser la version rp/mod en 0xFE
      si contexte.compilateur.b64Bits() 
      	si :opcode=Caract(0x40)  ALORS renvoyer faux
      	si :opcode=Caract(0x48)  ALORS renvoyer faux
      	
      FIN
      
      // vérification pour chaque paramètre que son type est compatible avec la syntaxe
      pour i = 1 _a_  tabTypeParam.Occurrence()
      	opTypeI est TypeOpérande <- tabTypeParam[i]
      	si pas opTypeI.bEstcompatibleAvecValeur(tabValeurParam[i], contexte) ALORS
      		// pas OK 
      		renvoyer faux
      	FIN
      FIN
      
      RENVOYER Vrai
     type : 458752
   -
     name : bEstcompatibleAvecContexte
     procedure_id : 2171592175616764002
     type_code : 12
     code : |1-
      procédure bEstcompatibleAvecContexte( context est ContexteCompilation dynamique ) : booléen
      
      si :modeValide="" renvoyer Vrai
      
      b64 est un booléen = context.compilateur.b64Bits()
      si :modeValide="32" _et_     b64  renvoyer faux
      si :modeValide="64" _et_ pas b64  renvoyer faux
      
      // OK 
      renvoyer vrai
     type : 458752
   -
     name : InitFromDescription
     internal_properties : BQAAAAUAAAAOodNhVAzRbhHCnQ5koNNI07b7ZhHo7MYLZvOk7deUOkgSoh7lINchZpfQ19QXPe/tGk5GhDopoPS1HPgMWrg8q+7HgU7IVpK9MipvfxBFM1bEKDcILvVmIfgAOV4+Ml/jrtRr6715RvtIlpp5Jjm029WEFM2XWlUfJpC/+MhwkEWd/quvibM6mLvgMsx4pqEGg7wgdDXQvBwVdVK7C9EdEACDdA==
     procedure_id : 1976289923846356881
     type_code : 12
     code : |1+
      // Initialisation d'une instruction a partir d'une de description au format CVS
      // = séparé par des ";"
      // ex : ADD;r/m8;r8;;;;0;;r
      Procédure InitFromDescription( local sDesc est chaine)
      
      // supprimer espace et TAB
      sDesc = Remplace(sDesc,tab  ,"")
      sDesc = Remplace(sDesc," "  ,"")
      si sDesc="" ALORS
      	retour
      FIN
      
      :syntaxeEnClair = remplace(sDesc,";", " ")
      // extraction des paramètres
      
      // nom de l'instruction en minuscules......
      // ex: "add" ou "call"
      mnemonique		   			= minuscule( ExtraitChaîne(sDesc,1,";") )
      
      // code binaire encodant cette instruction, de 1 a 4 octets
      sOpoCodeHex est une chaîne
      pour i = 6 a 9
      	sOctetI est chaine = ExtraitChaîne(sDesc,i,";")
      	si sOctetI<>"" ALORS
      		si taille(sOctetI)=1 alors sOctetI = "0" + sOctetI // force sur 2 octets
      		sOpoCodeHex += sOctetI
      	FIN
      FIN
      
      // type d'encodage des paramètres
      //"" si rien de spécial
      :encodage 					= ExtraitChaîne(sDesc,10,";") 
      dbgAssertion(:encodage <> EOT)
      // extension pour le préfixe VEx
      si :encodage=ENCODAGE_VEX ALORS
      	:vex_extPP 				= ExtraitChaîne(sDesc,11,";")  
      	:vex_extM				= ExtraitChaîne(sDesc,12,";")  
      	dbgAssertion( gauche(:vex_extM,2)="0F")
      FIN
      si :encodage=ENCODAGE_RM ALORS
      	:rex_prefixe		    =HexaVersBuffer(SansEspace(ExtraitChaîne(sDesc,11,";") ))
      FIN
      
      // si l'opcode fini par "+r"
      si Droite(sOpoCodeHex,2)="+r" alors
      	// encodage de l'opérande (registre) dans les bits de poids faible de l'opération. 
      	:encodage 					= ENCODAGE_ADDREGTOOPCODE
      	// enlève le "+r"
      	sOpoCodeHex = milieu(sOpoCodeHex,1,taille(sOpoCodeHex)-2)
      FIN
      
      :opcode	  		    	   = HexaVersBuffer(SansEspace(sOpoCodeHex) )
      
      // décodage des paramètres de l'instruction...... 4 au max
      pour i = 1 a 4
      	// récup de la chaine donnant le type du paramètre
      	paramI est chaine = Minuscule( ExtraitChaîne(sDesc,1+i,";"))
      	// "" indique qu'il n'y en a plus
      	si paramI="" ALORS
      		sortir
      	fin
      	// ajout du type de paramètre
      	opTypeI est TypeOpérande 
      	opTypeI.nomType = paramI
      	tabTypeParam.Ajoute(opTypeI)
      FIN
      
      // init signature
      calculesignature()
     type : 458752
   -
     name : _bBitRex
     procedure_id : 2020876198340613409
     type_code : 12
     code : |1+
      // indique si un bit du préfixe REX doit être mis a 1 pour un paramètreS.
      // ex: R9
      procédure _bBitRex( operande est ValeurOpérande  ) : booléen
      
      // cas des registres R8,R9, ... R15
      si operande.bEstModeRegistre()    _ou_ ...
         operande.bEstModeIndirection() ALORS
      	nReg est un entier = nIndiceRegistre( operande.registre)
      	renvoyer nReg>=8
      FIN
      // cas des valeurs immédiates de 64 bits
      si operande.bEstModeValeurImmediate() 
      	si operande.nGetTailleEnBit()=64 ALORS
      		RENVOYER 1
      	sinon
      		renvoyer 0
      	fin
      FIN
      // cas des indirection sur un label => on met un offset sur 32 bits
      SI operande.bEstModeIndirectionLabel() ALORS
      	RENVOYER 0
      FIN
      
      //@autres : TODO
      dbgAssertion(faux, "cas non géré" + operande.modeAdres.nom )
      renvoyer 0
     type : 458752
   -
     name : _WRXB_PourREXouVeX
     procedure_id : 2171126158774637368
     type_code : 12
     code : |1-
      // renvoie les 4 booléen W,R, X,B pour l'encodage REW/VEX
      procédure _WRXB_PourREXouVeX(tabValeurParam est un tableau de ValeurOperande) : (booléen, booléen, booléen, booléen)
      
      w	est un booléen		= 1	// 0 = Operand size determined by CS.D / 1 = 64 Bit Operand Size
      R	est un booléen			// Extension of the ModR/M reg field
      X	est un booléen			// Extension of the SIB index field
      B	est un booléen			// Extension of the ModR/M R/m field, SIB base field, or Opcode reg field
      
      si  tabValeurParam[1].bEstRegistre8Bits() ALORS
      	w= 0 // pas 64 bits
      FIN
      
      SI :encodage=ENCODAGE_VEX _ET_ :tabTypeParam[1].bModeEncodageRM()  _ET_ :tabTypeParam[3].bModeEncodageRM()  ALORS 
      	// cas particulier de RM a 3 paramètre. le 2 est dans le préfixe
      //	bEncodeRM		= Vrai
      //	nIndiceParam2RM	= 3
      	R	= _bBitRex( tabValeurParam[1] )
      	B	= _bBitRex( tabValeurParam[3] )
      	
      	RENVOYER (w,R,X,B)
      FIN
      
      SI :encodage = ENCODAGE_RM alors // spécial R/M (2 reg dans 1 octets)
      	R	= _bBitRex( tabValeurParam[1] )
      	B	= _bBitRex( tabValeurParam[2] )
      	SI _bInverseOrdreParam_EncodageRM()   ALORS
      		// si la syntaxe commence par r/M ex: MOV	r/m16/32	r16/32
      		// l'ordre src/dest est inversé
      		R<=>B
      	FIN	
      	SI  tabValeurParam.Occurrence()=2 ALORS
      		// cas mov  rax,qword ptr [r8+r12+1]
      		SI tabValeurParam[2].registre2<>""  _ET_ nIndiceRegistre(  tabValeurParam[2].registre2)>7 ALORS
      			X=1
      		FIN	
      	FIN
      	
      SINON
      	nbParamRM est un entier= tabValeurParam.Occurrence()
      	SI  nbParamRM=2 _ET_
      		tabValeurParam[2].modeAdres=ValeurOperande.MA_Immemdiat ALORS 	// cas add         r8b,0FFh  , il n'y que 1 paramètre dans REX
      		nbParamRM=1
      	fin
      	// selon le nb de paramètres a encoder :	
      	selon nbParamRM 
      		cas 1
      			B = _bBitRex( tabValeurParam[1] ) // cas "INC R10"
      			
      		CAS 2
      			R = _bBitRex( tabValeurParam[1] ) 
      			B = _bBitRex( tabValeurParam[2] )
      			
      		CAS 3 
      			R = _bBitRex( tabValeurParam[3] )	
      		AUTRE CAS
      			dbgAssertion(faux)
      	FIN
      	
      FIN
      renvoyer (w,R,X,B)
     type : 458752
   -
     name : _EncodePrefix_REX
     internal_properties : BQAAAAUAAABkuV/++9L9+q94L3yR1L1fBwts+wZSLdIjzaMZlu1X5FfGvaQiqBslRFdWrNiyu8G1yCcjmVDMA7EfZYI7xH1EkaoKV2Kc/nT7wB+nRUf1jvHYxPO1vtLxnlr2wU1qf/2m1/Zfem/CTbi0uLZuRt6k+CwG1lbDNwycyvxN+3QZ/D6A+O1wjxqHl8s8wCNUgBR/fuZSnx1nWT//j6qIL2TOYysn
     procedure_id : 2020855827309328332
     type_code : 12
     code : |1+
      // encoder le préfixe REX en 64 bits 
      // (pour accéder aux registre R8 par ex.)
      // voir par ex : https://xem.github.io/minix86/manual/intel-x86-and-64-manual-vol2/o_b5573232dd8f1481-69.html
      procédure _EncodePrefix_REX(tabValeurParam est un tableau de ValeurOpérande,  contexte est ContexteCompilation dynamique <utile>) : buffer
      
      dbgAssertion( tabValeurParam.Occurrence()>=1 )
      
      // si le n° de registre est les bits de poids faible de l'instruction.
      SI :encodage = ENCODAGE_ADDREGTOOPCODE ALORS
      	// si instructionnnnnparamètrerererereree , ex PUSH
      	SI tabValeurParam.Occurrence()=1  alors
      		// pas besoin de REX pour les 8 premiers
      		nReg1 est un entier =  nIndiceRegistre(tabValeurParam[1].registre)
      		si nReg1 <= 7
      			renvoyer ""
      		fin
      		// REX : 0x41
      		RENVOYER Caract( 0x41 )
      	fin
      	//2 paramètres. ex MOV	RAX,1234
      	dbgassert(tabValeurParam.Occurrence()=2)
      	
      	
      FIN
      
      //  récup des booléen qui encodent les paramètres
      w est un booléen   = 1 // 0 = Operand size determined by CS.D / 1 = 64 Bit Operand Size
      R est un booléen	   // Extension of the ModR/M reg field
      X est un booléen	   // Extension of the SIB index field
      B est un booléen	   // Extension of the ModR/M R/m field, SIB base field, or Opcode reg field
      (w,R,X,B) =	_WRXB_PourREXouVeX(tabValeurParam)
      
      
      // Calcul final de REX
      nREX est un entier = 0x40 // 4 bits de poids fort
      si w ALORS	nREX = nREX | 0x08
      si R ALORS	nREX = nREX | 0x04
      si X ALORS	nREX = nREX | 0x02
      si B ALORS	nREX = nREX | 0x01
      
      
      renvoyer Caract( nREX )
     type : 458752
   -
     name : _EncodePrefix_VEX
     procedure_id : 2170759682100575087
     type_code : 12
     code : |1+
      // encoder le préfixe VEX des instructions:
      //voir https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf
      //     2.3.5 :
      //		The VEX prefix	is encoded in either the two-byte form (the first byte must be C5H) or in the three-byte form (the
      //		first byte must be C4H). The two-byte VEX	is used mainly for 128-bit, scalar, and the most common 256-bit AVX
      //		instructions; while the three-byte VEX provides a compact replacement of REX and 3-byte opcode instructions
      //		(including AVX and FMA instructions).
      // ex :   mulx        rax,rax,rax  => "C4 E2 FB F6 C0"     
      procédure _EncodePrefix_VEX(tabValeurParam est un tableau de ValeurOpérande,  contexte est ContexteCompilation dynamique <utile>) : buffer
      dbgAssertion(tabValeurParam.Occurrence() = 3) // seul ca géré
      
       // VEX sur 3 Bytes :
       // voir https://en.wikipedia.org/wiki/VEX_prefix
       
      //  récup des booléen qui encodent les paramètres
      //w	est un booléen		= 1	// 0 = Operand size determined by CS.D / 1 = 64 Bit Operand Size
      //R	est un booléen			// Extension of the ModR/M reg field
      //X	est un booléen			// Extension of the SIB index field
      //B	est un booléen			// Extension of the ModR/M R/m field, SIB base field, or Opcode reg field
      soit (W,R,X,B) =	_WRXB_PourREXouVeX(tabValeurParam)
       
       // Byte 0 : indique qu'on est un préfixe VEX sur 3:
      bufVEX est un buffer = caract(0xC4)
      // byte 1 : R̅	X̅	B̅	m4	m3	m2	m1	m0
      byteVex1 est un entier = 0
      SI pas R ALORS	byteVex1 = byteVex1 | 0x80
      SI pas X ALORS	byteVex1  =byteVex1 | 0x40
      SI pas B ALORS	byteVex1 = byteVex1 | 0x20
      // m replaces leading opcode prefix bytes. 
      // The values 1, 2 and 3 are equivalent to opcode prefixes 0F, 0F 38 and 0F 3A; all other values are reserved. m
      m est un entier 
      selon :vex_extM 
      	cas "0F"   : m = 1
      	cas "0F38" : m = 2
      	cas "0F3A" : m = 3
      	AUTRE CAS
      		dbgAssertion(Faux, "vex_extM invalide")
      		RENVOYER "" // non géré	
      FIN
      
      byteVex1 = byteVex1 | m
      bufVEX += caract(byteVex1)
      
      // byte 2 : W	v̅3	v̅2	v̅1	v̅0	L	p1	p0
      //v̅ is the inversion of an additional source register index.
      //L indicates the vector length; 0 for 128-bit SSE (XMM) registers, and 1 for 256-bit AVX (YMM) registers.
      //p encodes additional prefix bytes. The values 0, 1, 2, and 3 correspond to implied prefixes of none, 66, F3, and F2.
      //   These encode the operand type for SSE instructions: packed single, packed double, scalar single and scalar double, respectively.
      byteVex2 est un entier = 0
      v est un entier = nIndiceRegistre(tabValeurParam[2].registre)
      v=  OUExclusifBinaire(v, 0xF) // vvvv: a register specifier (in 1’s complement form) or 1111 if unused.
      SI W ALORS	byteVex2 = byteVex2 | 0x80
       			byteVex2 = byteVex2 | (v * 8)
      p  est entier 
      SELON :vex_extPP
      	cas ""   :  p = 0
      	cas "66" :  p = 1
      	cas "F3" :  p = 2
      	cas "F2" :  p = 3
      	AUTRE CAS
      		dbgAssertion(Faux, "vex_extPP invalide")
      		RENVOYER "" // non géré	
      FIN
      byteVex2 = byteVex2 | p
      bufVEX += Caract(byteVex2)
      
      dbgAssertion(taille(bufVEX) = 3) 
      renvoyer bufVEX
     type : 458752
   -
     name : _bInverseOrdreParam_EncodageRM
     procedure_id : 2171602895855468099
     type_code : 12
     code : |1+
      procédure PRIVÉE _bInverseOrdreParam_EncodageRM() : booléen
      
      si :encodage=ENCODAGE_VEX ALORS
      	renvoyer  faux
      FIN
      
      // si la syntaxe commence par R/M ex: MOV	r/m16/32	r16/32
      // l'ordre src/dest est inversé
      // mais pas si le 2eme paramètre est aussi un R/M. ex: ADCX	r/m64	r/m64
      // empirique.
      si  tabTypeParam[1].bModeEncodageRM() _ET_ pas tabTypeParam[2].bModeEncodageRM()  ALORS
      	renvoyer vrai
      FIN
      // cas normale
      renvoyer faux
      
     type : 458752
   -
     name : _bAvecPrefixeVEXouREX
     procedure_id : 2171616991939055884
     type_code : 12
     code : |1-
      // indique si on doit rajouter un préfixe VEX/REX a l'encodage
      procédure privée _bAvecPrefixeVEXouREX(tabValeurParam est un tableau de ValeurOpérande, contexte est ContexteCompilation dynamique) : booléen
      
      // si forcé dans l'encodage
      SI :encodage=ENCODAGE_VEX ALORS
      	renvoyer vrai
      FIN
      
      // pas de REX si pas de paramètres
      SI tabValeurParam.Occurrence()<1 ALORS
      	RENVOYER faux
      FIN
      
      
      // si 64 bits :
      si contexte.compilateur.b64Bits() ALORS
      	si contexte.tailleOpérande=64 alors
      		// registre 32 bits : pas de préfixe REX. cas mov eax, 1
      		SI bEstRegistreDeType( tabValeurParam[1].registre, REGISTRE_32BITS) ALORS
      			RENVOYER faux
      		FIN		
      		
      		renvoyer vrai
      	FIN
      	// si un des paramètres est un registre d'indice supérieur a 8
      	// ex : r8 ou r12
      	pour tout paramI de tabValeurParam
      		si paramI.registre<>"" _et_ nIndiceRegistre(paramI.registre) >= 8 ALORS
      			renvoyer vrai
      		FIN
      		SI paramI.registre2<>"" _ET_ nIndiceRegistre(paramI.registre2) >= 8 ALORS
      			RENVOYER Vrai
      		FIN		
      		
      	FIN
      	
      FIN
      
      renvoyer faux
     type : 458752
   -
     name : Encode
     internal_properties : BQAAAAUAAACCpFJoMMZILkiDBPbqDFazAnivsNHbAWrLCJ4lYX2YzFJ1Yw7Id+9BmU3XRg8WVBYTfHoZVSbxrTzIw2yjwEhK2Zk3ue4TQNffbvu3Izb67NyM273eracHepu0je7J4lxb75cLSVJDK4BnwHB9mydnQVJX5OtUWjCOVwRNrleYfHLLcsyC9ViCfN3hHfEuSnq3+zoTIw==
     procedure_id : 1976289923846553489
     type_code : 12
     code : |1+
      // renvoyer l'instruction encodée (=le code x86 exécutable)
      // pour pour les paramètres <TabParam>
      Procédure encode(tabValeurParam est un tableau de ValeurOpérande,  contexte est ContexteCompilation dynamique) : buffer
      dbgAssertion(tabTypeParam.Occurrence() = tabValeurParam.Occurrence())
      
      code est un buffer
      nbParamTraite est un entier = 0
      
      // si on doit forcer le mode 16 bits
      si contexte.tailleOpérande=16 ALORS
      	code += Caract( 0x66 )
      FIN
      // si on doit forcer le mode 64 bits - REX ou VEX
      VEX_REX_Prefix est buffer
      SI _bAvecPrefixeVEXouREX(tabValeurParam,contexte)  ALORS
      	// si 3 opérandes => VEX
      	si :encodage=ENCODAGE_VEX ALORS
      		// VEX :
      		VEX_REX_Prefix = _EncodePrefix_VEX(tabValeurParam, contexte)
      	sinon
      		// REX: 0100 WRXB 
      		VEX_REX_Prefix = :rex_prefixe + _EncodePrefix_REX(tabValeurParam, contexte) // ex :  Caract( 0x40 )
      	fin
      	code 	  += VEX_REX_Prefix
      FIN
      
      // si encodage par ajoute du n° de registre a l'opcode (ex "POP")
      si :Encodage = ENCODAGE_ADDREGTOOPCODE ALORS
      	nReg est un entier = nIndiceRegistre(tabValeurParam[1].registre) 
      	// pour le cas des registres étendus 64 bits. ex R8
      	nReg = ETBinaire( nReg , 0x07) 
      	
      	code +=  caract( asc(:opcode) + nReg )
      	nbParamTraite++
      sinon
      	// OPCODE principal
      	code +=  :opcode 
      fin
      	
      // si encodage spécial R/M (2 opérandes registres dans 1 octets)
      bEncodeRM est un booléen   = (:encodage = ENCODAGE_RM )
      nIndiceParam2RM est entier = 2
      SI :encodage=ENCODAGE_VEX _ET_ :tabTypeParam[1].bModeEncodageRM()  ALORS 
      	// cas particulier de RM a 3 paramètre. le 2 est dans le préfixe
      	bEncodeRM       = vrai
      	nIndiceParam2RM = 3
      FIN
      SI bEncodeRM ALORS
      
      	rm est buffer
      	si  _bInverseOrdreParam_EncodageRM() ALORS
      		// si la syntaxe commence par r/M ex: MOV	r/m16/32	r16/32
      		// l'ordre src/dest est inversé
      		rm = TypeOpérande::Encode_RM_REG( tabValeurParam[nIndiceParam2RM], tabValeurParam[1] )
      	sinon
      		rm = TypeOpérande::Encode_RM_REG( tabValeurParam[1], 			   tabValeurParam[nIndiceParam2RM] )
      	fin
      	
      	code 		  += rm
      	// cas "lea eax,[label]"
      	SI tabValeurParam..Occurrence>=2 _ET_ tabValeurParam[2].bEstModeIndirectionLabel() ALORS
      		nbParamTraite += 1
      	sinon	
      		nbParamTraite += 2
      		RENVOYER code
      	fin
      fin
      
      
      // valeur du champ REG dans la partie modRegRM.
      // ex : INC 0, DEC 1
      nForceReg_modRegRM est entier = Val(:encodage)
      contexte.offsetDansInstruction = taille(code)
      
      // paramètres 
      POUR i = nbParamTraite+1 _a_ :tabTypeParam.Occurrence()
      	
      	SI :encodage=ENCODAGE_VEX ALORS
      		// le 2 est dans le VEX
      		SI	i = 2 ALORS CONTINUER
      	FIN
      	
      	soit typeParamI   = tabTypeParam[i]
      	valeurParamI est ValeurOpérande <- tabValeurParam[i]
      	contexte.offsetDansInstruction = Taille(code)
      	
      	// si la valeur est un label
      	si valeurParamI.bEstModeLabel() ALORS
      		valeurParamVide est ValeurOpérande 
      		codeAPatcher est un buffer = typeParamI.Encode( valeurParamVide, nForceReg_modRegRM, contexte )
      		// il faudra patcher ici
      		contexte.onUtilisationLabel( valeurParamI.label, taille(code), taille(codeAPatcher), typeParamI )
      		// encodage du paramètre avec 0 pour l'instant
      		code += codeAPatcher
      		continuer
      	FIN
      	// si la valeur est une indirection sur un label
      	SI valeurParamI.bEstModeIndirectionLabel() ALORS
      		// il faudra patcher ici : offset sur 32 bits
      		valeurParamVide est ValeurOpérande 
      		codeAPatcher est un buffer = typeParamI.Encode( valeurParamVide, nForceReg_modRegRM, contexte )
      		contexte.onUtilisationLabel( valeurParamI.label, Taille(code), Taille(codeAPatcher), typeParamI )
      		// encodage du paramètre avec 0 pour l'instant
      		code += codeAPatcher
      		CONTINUER
      	fin
      	
      	// encodage du paramètre
      	code += typeParamI.Encode( valeurParamI, nForceReg_modRegRM, contexte )
      	
      FIN
      
      
      renvoyer code
      
     type : 458752
   -
     name : bEstMeilleureQue
     procedure_id : 1977062395187041756
     type_code : 12
     code : |1+
       // indique si on est une meilleure syntaxe (= on génère un code plus court)
      procédure bEstMeilleureQue( autreSyntaxe est SyntaxeInstructionX86 ) : booléen
      
      renvoyer _nEvalRapideTaillleCodeGénéré() <  autreSyntaxe._nEvalRapideTaillleCodeGénéré()
      
     type : 458752
   -
     name : _nEvalRapideTaillleCodeGénéré
     procedure_id : 1977062476791505041
     type_code : 12
     code : |1-
       // évaluation de de la taille générée pour choix de la meilleure syntaxe
       procédure _nEvalRapideTaillleCodeGénéré() : entier
      
      si :encodage = ENCODAGE_ADDREGTOOPCODE alors
      	renvoyer taille(:opcode)
      fin
      
      
      SI :encodage = ENCODAGE_RM ALORS
      	renvoyer Taille(:opcode) + 1
      fin
      
      nTailleParam est un entier = 0
      POUR i = 1 _a_ :tabTypeParam.Occurrence()
      	soit typeParamI   = tabTypeParam[i]
      	nTailleParam += typeParamI.nGetTailleEnBit()/8
      fin
      RENVOYER Taille(:opcode) + nTailleParam
      	
     type : 458752
   -
     name : calculesignature
     procedure_id : 2182473805971523804
     type_code : 12
     code : |1-
      // calcul la signature de la syntaxe
      // ex "add_reg_imm16"
      Procédure calculesignature()
       
      :signature = :mnemonique
      POUR i = 1 _a_ :tabTypeParam.Occurrence()
      	soit typeParamI   = tabTypeParam[i]
      	:signature += "_" + typeParamI.nomType
      FIN
       
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1b65619800409942
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
